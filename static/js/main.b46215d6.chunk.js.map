{"version":3,"sources":["Logo.png","components/Home.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backEndURL","Title","Typography","Paragraph","Home","href","src","alt","Profile","props","user","name","Header","Layout","Footer","Content","AntLink","Link","Text","App","useState","setUser","setError","authenticated","setAuthenticated","useEffect","a","axios","get","withCredentials","headers","Accept","then","response","status","data","Error","catch","err","error","authResponse","fetchAuthResponse","className","style","height","to","logo","width","strong","marginLeft","theme","mode","defaultSelectedKeys","Item","key","padding","margin","path","textAlign","role","aria-label","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b46215d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.e86324af.png\";","import React from \"react\";\nimport { Typography, Divider } from \"antd\";\n\nconst { Title, Paragraph } = Typography;\n\nlet backEndURL;\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n  // dev\n  backEndURL = \"http://localhost:9000\";\n} else {\n  // production\n  backEndURL = \"https://tweet-cleaner-server.herokuapp.com\";\n}\n\nfunction Home() {\n  return (\n    <Typography>\n      <Title>Welcome to TweetCleaner</Title>\n      <Paragraph>\n        This app helps Twitter users to delete a batch of their tweets very\n        fast. You have multiple options to clean your tweets, such as:\n      </Paragraph>\n      <Paragraph>\n        <ul>\n          <li>\n            Choosing a date or period (For example, 30 days) to delete all the\n            created tweets before that date.\n          </li>\n          <li>\n            Filter your tweets based on time, content, or the words in the\n            tweet, number of likes, number of comments, etc. Once you are done\n            with filtering them, you can delete the filtered tweets.\n          </li>\n        </ul>\n      </Paragraph>\n      <Divider></Divider>\n      <Paragraph>To start Sign in with your Twitter account:</Paragraph>\n      <a href={`${backEndURL}/auth/twitter`}>\n        <img\n          src=\"https://cdn.cms-twdigitalassets.com/content/dam/developer-twitter/icons/sign-in-with-twitter-gray-1-png-img-fullhd-medium.png.img.fullhd.medium.png\"\n          alt=\"Sign in with Twitter\"\n        />\n      </a>\n    </Typography>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction Profile(props) {\n  return <h2>Hi {props.user.name}</h2>;\n}\n\nexport default Profile;\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport { Layout, Menu, Typography } from \"antd\";\n\nimport Home from \"./components/Home\";\nimport Profile from \"./components/Profile\";\n\nimport \"./App.less\";\n\nimport logo from \"./Logo.png\";\nimport axios from \"axios\";\n\nconst { Header, Footer, Content } = Layout;\nconst { Link: AntLink, Text } = Typography;\n\nlet backEndURL;\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n  // dev\n  backEndURL = \"http://localhost:9000\";\n} else {\n  // production\n  backEndURL = \"https://tweet-cleaner-server.herokuapp.com\";\n}\n\nfunction App() {\n  const [user, setUser] = useState({});\n  const [error, setError] = useState(null);\n  const [authenticated, setAuthenticated] = useState(false);\n\n  useEffect(() => {\n    const fetchAuthResponse = async () => {\n      const authResponse = await axios\n        .get(`${backEndURL}/auth/login/success`, {\n          withCredentials: true,\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Credentials\": true,\n          },\n        })\n        .then((response) => {\n          if (response.status === 200) return response.data;\n          throw new Error(\"Failed to authenticate user.\");\n        })\n        .catch((err) => {\n          return { error: \"Failed to authenticate user.\" };\n        });\n\n      if (!authResponse.error) {\n        setAuthenticated(true);\n        setUser(authResponse.user);\n      } else {\n        setAuthenticated(false);\n        setError(authResponse.err);\n      }\n    };\n    fetchAuthResponse();\n  }, []);\n\n  return (\n    <div>\n      <Layout className=\"layout\" style={{ height: \"100vh\" }}>\n        <Header>\n          <div className=\"logo\">\n            <Link to=\"/TweetCleanerWebsite\">\n              <img src={logo} alt=\"Website Logo\" style={{ width: \"50px\" }} />\n              <Text strong style={{ marginLeft: \"8px\" }}>\n                TweetCleaner\n              </Text>\n            </Link>\n          </div>\n          {!authenticated ? (\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\n              <Menu.Item key=\"1\">\n                <Link to=\"/TweetCleanerWebsite\">Home</Link>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <a href={`${backEndURL}/auth/twitter`}>Login</a>\n              </Menu.Item>\n            </Menu>\n          ) : (\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\n              <Menu.Item key=\"1\">\n                <Link to=\"/TweetCleanerWebsite\">Home</Link>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <Link to=\"/profile\">Profile</Link>\n              </Menu.Item>\n              <Menu.Item key=\"3\">\n                <a href={`${backEndURL}/auth/logout`}>Logout</a>\n              </Menu.Item>\n            </Menu>\n          )}\n        </Header>\n        <Content style={{ padding: \"0 50px\" }}>\n          <div className=\"site-layout-content\" style={{ margin: \"16px 0\" }}>\n            <Switch>\n              {authenticated && (\n                <Route path=\"/profile\">\n                  <Profile user={user} />\n                </Route>\n              )}\n              <Route path=\"/TweetCleanerWebsite\">\n                <Home />\n              </Route>\n            </Switch>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          <Text strong>\n            Made with{\" \"}\n            <span role=\"img\" aria-label=\"heart\">\n              ❤️\n            </span>{\" \"}\n            by{\" \"}\n            <AntLink href=\"https://parsahejabi.com/\" target=\"_blank\">\n              Parsa Hejabi\n            </AntLink>{\" \"}\n            - 2020\n          </Text>\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}